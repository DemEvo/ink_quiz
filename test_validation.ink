// test.ink — набор кейсов для проверки валидатора имен узлов/стежков, дивертов и т.п.

// 0) НЕЛЬЗЯ: '->' вне узла + вызов без EXTERNAL
-> start
~ beep()

// 1) НЕЛЬЗЯ: точка в имени узла
=== seat.one ===
Официант: Это НЕ должен быть узел.
+ Продолжить -> start.menu

// 2) НЕЛЬЗЯ: стежок вне узла
== stray ==
Текст

// 3) НЕЛЬЗЯ: узел с зарезервированным именем
=== END ===
Тут тоже нельзя объявлять узел.
-> DONE

// 4) НЕЛЬЗЯ: стежок с точкой/невалидным именем
=== misc ===
== bad.name ==
Текст
-> start

// 5) ВАЛИДНЫЕ узлы и стежки далее, но с целенаправленными ошибками в ссылках/переменных

=== start ===
Официант: Привет. Сколько вас?
+ Один -> seat.one          // (ok — существующий стежок будет в узле seat ниже)
+ Меню -> start.menu        // (ошибка — такого стежка нет)
+ Выйти -> leave            // (ok — узел будет ниже)

=== drinks ===
== menu ==
Бариста: Напитки <> (glue тест)
+ Чай -> tea                // (ok — относительный стежок drinks.tea)
+ Назад -> start
== tea ==
~ order = "чай"             // (order не объявлен — ошибка присваивания)
Официант: Хорошо.
-> pay.confirm              // (ok — абсолютный стежок; см. узел pay ниже)

=== pay ===
== start ==
~ amount = price            // (amount не объявлен — ошибка; price объявим в конце, но позже — остаётся ошибка здесь)
-> confirm
== confirm ==
Официант: К оплате {price} руб. {coins > 0 ? "спасибо" | "без сдачи"}  // coins не объявлена — ошибка
-> END

=== food ===
== start ==
Официант: Меню еды. (возврат к началу)
-> start

=== seat ===
== one ==
Официант: Один гость. Идём к напиткам.
-> drinks.menu
== two ==
Официант: Двое гостей. Идём к напиткам.
-> drinks.menu

=== leave ===
До свидания!
-> END

// 6) Объявления VAR/EXTERNAL/LIST (позже по тексту — и это нормально; проверим, что ранние использования ругаются)
VAR price = 120
EXTERNAL play(sound)
~ play("ding","extra")      // ошибка — неправильное число аргументов
LIST sizes = small, medium, large
